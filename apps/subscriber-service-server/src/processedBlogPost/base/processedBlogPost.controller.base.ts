/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedBlogPostService } from "../processedBlogPost.service";
import { ProcessedBlogPostCreateInput } from "./ProcessedBlogPostCreateInput";
import { ProcessedBlogPost } from "./ProcessedBlogPost";
import { ProcessedBlogPostFindManyArgs } from "./ProcessedBlogPostFindManyArgs";
import { ProcessedBlogPostWhereUniqueInput } from "./ProcessedBlogPostWhereUniqueInput";
import { ProcessedBlogPostUpdateInput } from "./ProcessedBlogPostUpdateInput";

export class ProcessedBlogPostControllerBase {
  constructor(protected readonly service: ProcessedBlogPostService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedBlogPost })
  async createProcessedBlogPost(
    @common.Body() data: ProcessedBlogPostCreateInput
  ): Promise<ProcessedBlogPost> {
    return await this.service.createProcessedBlogPost({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedBlogPost] })
  @ApiNestedQuery(ProcessedBlogPostFindManyArgs)
  async processedBlogPosts(
    @common.Req() request: Request
  ): Promise<ProcessedBlogPost[]> {
    const args = plainToClass(ProcessedBlogPostFindManyArgs, request.query);
    return this.service.processedBlogPosts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedBlogPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedBlogPost(
    @common.Param() params: ProcessedBlogPostWhereUniqueInput
  ): Promise<ProcessedBlogPost | null> {
    const result = await this.service.processedBlogPost({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedBlogPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedBlogPost(
    @common.Param() params: ProcessedBlogPostWhereUniqueInput,
    @common.Body() data: ProcessedBlogPostUpdateInput
  ): Promise<ProcessedBlogPost | null> {
    try {
      return await this.service.updateProcessedBlogPost({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedBlogPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedBlogPost(
    @common.Param() params: ProcessedBlogPostWhereUniqueInput
  ): Promise<ProcessedBlogPost | null> {
    try {
      return await this.service.deleteProcessedBlogPost({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
