/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProcessedBlogPost as PrismaProcessedBlogPost,
} from "@prisma/client";

export class ProcessedBlogPostServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedBlogPostCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedBlogPost.count(args);
  }

  async processedBlogPosts(
    args: Prisma.ProcessedBlogPostFindManyArgs
  ): Promise<PrismaProcessedBlogPost[]> {
    return this.prisma.processedBlogPost.findMany(args);
  }
  async processedBlogPost(
    args: Prisma.ProcessedBlogPostFindUniqueArgs
  ): Promise<PrismaProcessedBlogPost | null> {
    return this.prisma.processedBlogPost.findUnique(args);
  }
  async createProcessedBlogPost(
    args: Prisma.ProcessedBlogPostCreateArgs
  ): Promise<PrismaProcessedBlogPost> {
    return this.prisma.processedBlogPost.create(args);
  }
  async updateProcessedBlogPost(
    args: Prisma.ProcessedBlogPostUpdateArgs
  ): Promise<PrismaProcessedBlogPost> {
    return this.prisma.processedBlogPost.update(args);
  }
  async deleteProcessedBlogPost(
    args: Prisma.ProcessedBlogPostDeleteArgs
  ): Promise<PrismaProcessedBlogPost> {
    return this.prisma.processedBlogPost.delete(args);
  }
}
