/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ErrorLog as PrismaErrorLog } from "@prisma/client";

export class ErrorLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ErrorLogCountArgs, "select">): Promise<number> {
    return this.prisma.errorLog.count(args);
  }

  async errorLogs(
    args: Prisma.ErrorLogFindManyArgs
  ): Promise<PrismaErrorLog[]> {
    return this.prisma.errorLog.findMany(args);
  }
  async errorLog(
    args: Prisma.ErrorLogFindUniqueArgs
  ): Promise<PrismaErrorLog | null> {
    return this.prisma.errorLog.findUnique(args);
  }
  async createErrorLog(
    args: Prisma.ErrorLogCreateArgs
  ): Promise<PrismaErrorLog> {
    return this.prisma.errorLog.create(args);
  }
  async updateErrorLog(
    args: Prisma.ErrorLogUpdateArgs
  ): Promise<PrismaErrorLog> {
    return this.prisma.errorLog.update(args);
  }
  async deleteErrorLog(
    args: Prisma.ErrorLogDeleteArgs
  ): Promise<PrismaErrorLog> {
    return this.prisma.errorLog.delete(args);
  }
}
