/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, KafkaMessage as PrismaKafkaMessage } from "@prisma/client";

export class KafkaMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.KafkaMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.kafkaMessage.count(args);
  }

  async kafkaMessages(
    args: Prisma.KafkaMessageFindManyArgs
  ): Promise<PrismaKafkaMessage[]> {
    return this.prisma.kafkaMessage.findMany(args);
  }
  async kafkaMessage(
    args: Prisma.KafkaMessageFindUniqueArgs
  ): Promise<PrismaKafkaMessage | null> {
    return this.prisma.kafkaMessage.findUnique(args);
  }
  async createKafkaMessage(
    args: Prisma.KafkaMessageCreateArgs
  ): Promise<PrismaKafkaMessage> {
    return this.prisma.kafkaMessage.create(args);
  }
  async updateKafkaMessage(
    args: Prisma.KafkaMessageUpdateArgs
  ): Promise<PrismaKafkaMessage> {
    return this.prisma.kafkaMessage.update(args);
  }
  async deleteKafkaMessage(
    args: Prisma.KafkaMessageDeleteArgs
  ): Promise<PrismaKafkaMessage> {
    return this.prisma.kafkaMessage.delete(args);
  }
}
