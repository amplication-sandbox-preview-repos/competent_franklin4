/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KafkaMessageService } from "../kafkaMessage.service";
import { KafkaMessageCreateInput } from "./KafkaMessageCreateInput";
import { KafkaMessage } from "./KafkaMessage";
import { KafkaMessageFindManyArgs } from "./KafkaMessageFindManyArgs";
import { KafkaMessageWhereUniqueInput } from "./KafkaMessageWhereUniqueInput";
import { KafkaMessageUpdateInput } from "./KafkaMessageUpdateInput";

export class KafkaMessageControllerBase {
  constructor(protected readonly service: KafkaMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: KafkaMessage })
  async createKafkaMessage(
    @common.Body() data: KafkaMessageCreateInput
  ): Promise<KafkaMessage> {
    return await this.service.createKafkaMessage({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [KafkaMessage] })
  @ApiNestedQuery(KafkaMessageFindManyArgs)
  async kafkaMessages(@common.Req() request: Request): Promise<KafkaMessage[]> {
    const args = plainToClass(KafkaMessageFindManyArgs, request.query);
    return this.service.kafkaMessages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: KafkaMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async kafkaMessage(
    @common.Param() params: KafkaMessageWhereUniqueInput
  ): Promise<KafkaMessage | null> {
    const result = await this.service.kafkaMessage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: KafkaMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateKafkaMessage(
    @common.Param() params: KafkaMessageWhereUniqueInput,
    @common.Body() data: KafkaMessageUpdateInput
  ): Promise<KafkaMessage | null> {
    try {
      return await this.service.updateKafkaMessage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: KafkaMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteKafkaMessage(
    @common.Param() params: KafkaMessageWhereUniqueInput
  ): Promise<KafkaMessage | null> {
    try {
      return await this.service.deleteKafkaMessage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
